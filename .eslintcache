[{"F:\\ProgettiLearn\\Typescript\\tareas\\src\\index.tsx":"1","F:\\ProgettiLearn\\Typescript\\tareas\\src\\App.tsx":"2","F:\\ProgettiLearn\\Typescript\\tareas\\src\\reportWebVitals.ts":"3","F:\\ProgettiLearn\\Typescript\\tareas\\src\\components\\Container\\index.tsx":"4","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\Todo\\index.tsx":"5","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\BackendTodo\\index.tsx":"6","F:\\ProgettiLearn\\Typescript\\tareas\\src\\components\\Task\\index.tsx":"7","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\oneTodo\\index.tsx":"8","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\Register.tsx":"9","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\Login\\Login.tsx":"10","F:\\ProgettiLearn\\Typescript\\tareas\\src\\Utils\\Context\\GlobalContext.tsx":"11","F:\\ProgettiLearn\\Typescript\\tareas\\src\\components\\Route\\index.tsx":"12","F:\\ProgettiLearn\\Typescript\\tareas\\src\\Utils\\index.tsx":"13","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\Share\\index.tsx":"14","F:\\ProgettiLearn\\Typescript\\tareas\\src\\components\\modale\\index.tsx":"15"},{"size":553,"mtime":1614104342820,"results":"16","hashOfConfig":"17"},{"size":2014,"mtime":1614104342763,"results":"18","hashOfConfig":"17"},{"size":425,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":1990,"mtime":1614104342785,"results":"20","hashOfConfig":"17"},{"size":3270,"mtime":1614104342882,"results":"21","hashOfConfig":"17"},{"size":7500,"mtime":1614166408810,"results":"22","hashOfConfig":"17"},{"size":1176,"mtime":1614104342801,"results":"23","hashOfConfig":"17"},{"size":2417,"mtime":1614167103155,"results":"24","hashOfConfig":"17"},{"size":2822,"mtime":1614104342845,"results":"25","hashOfConfig":"17"},{"size":3502,"mtime":1614104342835,"results":"26","hashOfConfig":"17"},{"size":709,"mtime":1614104342771,"results":"27","hashOfConfig":"17"},{"size":1290,"mtime":1614104342794,"results":"28","hashOfConfig":"17"},{"size":519,"mtime":1614104342778,"results":"29","hashOfConfig":"17"},{"size":1070,"mtime":1614104342870,"results":"30","hashOfConfig":"17"},{"size":688,"mtime":1614104342807,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"z74h06",{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"F:\\ProgettiLearn\\Typescript\\tareas\\src\\index.tsx",[],["70","71"],"F:\\ProgettiLearn\\Typescript\\tareas\\src\\App.tsx",["72","73"],"import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Route from \"./components/Route\";\r\nimport Container from \"./components/Container\";\r\nimport Todo from \"./pages/Todo\";\r\nimport BackendTodo from \"./pages/BackendTodo\";\r\nimport oneTodo from \"./pages/oneTodo\";\r\nimport Share from \"./pages/Share\";\r\nimport Register from \"./pages/Register\";\r\nimport Login from \"./pages/Login/Login\";\r\nimport {\r\n  GlobalContext,\r\n  GlobalContextOptional,\r\n  initialContextState,\r\n} from \"./Utils/Context/GlobalContext\";\r\nimport axios from \"axios\";\r\nimport { request } from \"./Utils\";\r\nfunction App() {\r\n  const [context, setContext] = useState(initialContextState);\r\n\r\n  const updateGlobalContext = (state: GlobalContextOptional) => {\r\n    setContext({ ...context, ...state });\r\n  };\r\n\r\n  useEffect(() => {\r\n    request(\"get\", \"/authentication/status\")\r\n      .then((data) => {\r\n        updateGlobalContext({ authenticated: true, ...data });\r\n      })\r\n      .catch((err) => {\r\n        localStorage.removeItem(\"token\");\r\n        updateGlobalContext({ authenticated: false });\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{ ...context, updateGlobalContext }}>\r\n      <Router>\r\n        <Container>\r\n          <Route\r\n            type=\"notAuthenticated\"\r\n            path=\"/register\"\r\n            component={Register}\r\n          />\r\n          <Route type=\"notAuthenticated\" path=\"/login\" component={Login} />\r\n          <Route type=\"authenticated\" exact path=\"/\" component={Todo} />\r\n          <Route\r\n            type=\"authenticated\"\r\n            exact\r\n            path=\"/api\"\r\n            component={BackendTodo}\r\n          />\r\n          <Route type=\"authenticated\" path=\"/api/:id\" component={oneTodo} />\r\n          <Route\r\n            type=\"authenticated\"\r\n            path=\"/share/:id/:title\"\r\n            component={Share}\r\n          />\r\n        </Container>\r\n      </Router>\r\n    </GlobalContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","F:\\ProgettiLearn\\Typescript\\tareas\\src\\reportWebVitals.ts",[],"F:\\ProgettiLearn\\Typescript\\tareas\\src\\components\\Container\\index.tsx",["74","75","76","77","78","79"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { request } from \"../../Utils\";\r\nimport {\r\n  GlobalContext,\r\n  initialContextState,\r\n} from \"../../Utils/Context/GlobalContext\";\r\n\r\ninterface ContainerProp {\r\n  className?: string;\r\n  children: any;\r\n}\r\n\r\nfunction Container({ className = \"\", children }: ContainerProp) {\r\n  const {\r\n    authenticated,\r\n    updateGlobalContext,\r\n    email,\r\n    name,\r\n    surname,\r\n    id,\r\n  } = useContext(GlobalContext);\r\n  const onLogout = () => {\r\n    request(\"post\", \"/authentication/logout-all\").then(() => {\r\n      localStorage.removeItem(\"token\");\r\n      updateGlobalContext({ ...initialContextState, authenticated: false });\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"container mx-auto\">\r\n        <nav className=\"  w-full bg-indigo-500 h-20 rounded-2xl\">\r\n          {authenticated && (\r\n            <>\r\n              <Link\r\n                to=\"/api\"\r\n                className=\" bg-green-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full\"\r\n              >\r\n                TodoOnline{\" \"}\r\n              </Link>\r\n              <div className=\" flex justify-end pr-1\">\r\n                <button\r\n                  onClick={onLogout}\r\n                  className=\" bg-yellow-500 hover:bg-red-700 text-white font-bold px-2 rounded-full\"\r\n                >\r\n                  Logout\r\n                </button>\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          {!authenticated && (\r\n            <>\r\n              <p className=\" flex justify-end p-4\">\r\n                <Link\r\n                  to=\"/register\"\r\n                  className=\" bg-yellow-500 hover:bg-yellow-700 text-white font-bold py-2 px-4 rounded-full\"\r\n                >\r\n                  Registrati\r\n                </Link>\r\n              </p>\r\n            </>\r\n          )}\r\n        </nav>\r\n        {children}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\Todo\\index.tsx",[],"F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\BackendTodo\\index.tsx",["80","81","82"],"F:\\ProgettiLearn\\Typescript\\tareas\\src\\components\\Task\\index.tsx",["83","84","85"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { ITask } from \"../../type\";\r\n\r\ninterface TaskProp {\r\n  className?: string;\r\n  task: ITask;\r\n\r\n  onDelete: () => void;\r\n  onToggle: () => void;\r\n  onShare: () => void;\r\n}\r\n\r\nfunction Task({ className = \"\", onDelete, onToggle, onShare, task }: TaskProp) {\r\n  return (\r\n    <div className=\"card-footer-item\">\r\n      <p\r\n        className=\"title is-6 has-text-centered font-black \"\r\n        style={{ textDecoration: task.done ? \"line-through\" : \"\" }}\r\n      >\r\n        {task.name}\r\n      </p>\r\n      <div className=\"buttons is-right\">\r\n        <button\r\n          className=\"button is-link is-light is-rounded is-small\"\r\n          onClick={() => onToggle()}\r\n        >\r\n          {task.done ? \"✅\" : \"❌\"}\r\n        </button>\r\n        <button\r\n          className=\"button is-danger is-rounded is-small\"\r\n          onClick={() => onDelete()}\r\n        >\r\n          🗑\r\n        </button>\r\n        <button\r\n          className=\"button is-danger is-rounded is-small\"\r\n          onClick={() => onShare()}\r\n        >\r\n          🔗\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\oneTodo\\index.tsx",["86","87"],"import axios from \"axios\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { TodoI } from \"../../type\";\r\nimport { request } from \"../../Utils\";\r\n\r\nexport default function OneTodo(props: any) {\r\n  const _id = props.match.params.id;\r\n\r\n  const [todo, setTodo] = useState<TodoI>();\r\n\r\n  console.log(_id);\r\n  const onEdit = () => {\r\n    request(\"post\", \"/todo/edit/\", todo)\r\n      .then((data) => {})\r\n      .catch((err) => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    request(\"get\", \"/todo/info/\" + _id)\r\n      .then((todo) => {\r\n        setTodo(todo);\r\n      })\r\n      .catch((err) => {});\r\n  }, [_id]);\r\n\r\n  return (\r\n    <>\r\n      {!todo && <p>Loading...</p>}\r\n      {todo && (\r\n        <>\r\n          <label className=\"title is-6 has-text-centered font-black\">\r\n            Title Task\r\n            <input\r\n              className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n              value={todo.title}\r\n              onChange={(e) => setTodo({ ...todo, title: e.target.value })}\r\n            ></input>\r\n          </label>\r\n          <label className=\"title is-6 has-text-centered font-black\">\r\n            Description task\r\n            <input\r\n              className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n              value={todo.description}\r\n              onChange={(e) =>\r\n                setTodo({ ...todo, description: e.target.value })\r\n              }\r\n            ></input>\r\n          </label>\r\n          <label>\r\n            Done :\r\n            <input\r\n              className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded \"\r\n              type=\"checkbox\"\r\n              checked={todo.done}\r\n              onClick={() => setTodo({ ...todo, done: !todo.done })}\r\n            ></input>\r\n          </label>\r\n          <div>\r\n            <button\r\n              className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full\"\r\n              onClick={onEdit}\r\n            >\r\n              Modifica\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\Register.tsx",["88","89"],"import axios from \"axios\";\r\nimport React, { useState, useEffect, useContext } from \"react\";\r\nimport { FormRegister } from \"../type\";\r\nimport { request } from \"../Utils\";\r\nimport { GlobalContext } from \"../Utils/Context/GlobalContext\";\r\n// nome cognome email psw pswConfirm tos\r\nexport default function Register() {\r\n  const [userInfo, setUserInfo] = useState<FormRegister>({\r\n    name: \"\",\r\n    surname: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    passwordConfirm: \"\",\r\n    tos: false,\r\n  });\r\n  const { updateGlobalContext } = useContext(GlobalContext);\r\n  const onFormSubmit = (e: any) => {\r\n    e.preventDefault();\r\n\r\n    request(\"post\", \"/authentication/signup\")\r\n      .then((data) => {\r\n        const token = data.token;\r\n        localStorage.setItem(\"token\", token);\r\n        console.log(data);\r\n        updateGlobalContext({ ...data, authenticated: true });\r\n      })\r\n\r\n      .catch((err) => {});\r\n  };\r\n  const onValueChange = (e: any, field: string) => {\r\n    const text = e.target.value;\r\n    setUserInfo({ ...userInfo, [field]: text });\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <form onSubmit={onFormSubmit}>\r\n          <input\r\n            required\r\n            className=\"border\"\r\n            type=\"text\"\r\n            placeholder=\"inserisci nome\"\r\n            value={userInfo.name}\r\n            onChange={(e) => onValueChange(e, \"name\")}\r\n          ></input>\r\n          <br />\r\n          <input\r\n            required\r\n            className=\"border\"\r\n            type=\"text\"\r\n            placeholder=\"inserisci cognome\"\r\n            value={userInfo.surname}\r\n            onChange={(e) => onValueChange(e, \"surname\")}\r\n          ></input>\r\n          <br />\r\n          <input\r\n            required\r\n            className=\"border\"\r\n            type=\"text\"\r\n            placeholder=\"email insert\"\r\n            value={userInfo.email}\r\n            onChange={(e) => onValueChange(e, \"email\")}\r\n          ></input>{\" \"}\r\n          <br />\r\n          <input\r\n            required\r\n            className=\"border\"\r\n            type=\"password\"\r\n            placeholder=\"password\"\r\n            value={userInfo.password}\r\n            onChange={(e) => onValueChange(e, \"password\")}\r\n          ></input>{\" \"}\r\n          <br />\r\n          <input\r\n            className=\"border\"\r\n            type=\"password\"\r\n            placeholder=\"password confirm\"\r\n            value={userInfo.passwordConfirm}\r\n            onChange={(e) => onValueChange(e, \"passwordConfirm\")}\r\n          ></input>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={userInfo.tos}\r\n            onClick={() => setUserInfo({ ...userInfo, tos: !userInfo.tos })}\r\n          ></input>\r\n          <button className=\"bg-blue-400\" type=\"submit\">\r\n            Registrati\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\Login\\Login.tsx",["90","91","92"],"import axios from \"axios\";\r\nimport React, { useEffect, useRef, useState, useContext } from \"react\";\r\nimport { FormLogin } from \"../../type\";\r\nimport { request } from \"../../Utils\";\r\nimport { GlobalContext } from \"../../Utils/Context/GlobalContext\";\r\n\r\nexport default function Login() {\r\n  const [loginInfo, setLoginInfo] = useState<FormLogin>({\r\n    email: \"\",\r\n    password: \"\",\r\n    remember: false,\r\n  });\r\n  const { updateGlobalContext } = useContext(GlobalContext);\r\n  const onValueChange = (e: any, field: string) => {\r\n    const text = e.target.value;\r\n    setLoginInfo({ ...loginInfo, [field]: text });\r\n  };\r\n  const onFormSubmit = (e: any) => {\r\n    e.preventDefault();\r\n\r\n    let body: any = { ...loginInfo };\r\n    body.remember = loginInfo.remember ? \"yes\" : \"no\";\r\n\r\n    request(\"post\", \"/authentication/login\", body).then((data) => {\r\n      const token = data.token;\r\n      localStorage.setItem(\"token\", token);\r\n      updateGlobalContext({ ...data, authenticated: true });\r\n      console.log(data);\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\" flex justify-center p-3\">\r\n        <form onSubmit={onFormSubmit}>\r\n          <label className=\"block\">\r\n            <label className=\"text-gray-700 \">Email</label>\r\n            <input\r\n              required\r\n              className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n              type=\"text\"\r\n              placeholder=\"Inserisci la tua email\"\r\n              value={loginInfo.email}\r\n              onChange={(e) => onValueChange(e, \"email\")}\r\n            ></input>{\" \"}\r\n            <br />\r\n          </label>\r\n          <label className=\"block\">\r\n            <label className=\"text-gray-700\">Password</label>\r\n            <input\r\n              required\r\n              className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\"\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n              value={loginInfo.password}\r\n              onChange={(e) => onValueChange(e, \"password\")}\r\n            ></input>{\" \"}\r\n            <br />\r\n          </label>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center\">\r\n              <input\r\n                className=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded \"\r\n                type=\"checkbox\"\r\n                checked={loginInfo.remember}\r\n                onClick={() =>\r\n                  setLoginInfo({ ...loginInfo, remember: !loginInfo.remember })\r\n                }\r\n              ></input>\r\n              <label className=\"ml-2 block text-sm text-gray-900\">\r\n                Rimani Loggato\r\n              </label>\r\n            </div>\r\n          </div>\r\n          <br />\r\n          <div>\r\n            <button\r\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n              type=\"submit\"\r\n            >\r\n              Login\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","F:\\ProgettiLearn\\Typescript\\tareas\\src\\Utils\\Context\\GlobalContext.tsx",[],"F:\\ProgettiLearn\\Typescript\\tareas\\src\\components\\Route\\index.tsx",[],"F:\\ProgettiLearn\\Typescript\\tareas\\src\\Utils\\index.tsx",[],"F:\\ProgettiLearn\\Typescript\\tareas\\src\\pages\\Share\\index.tsx",["93","94","95","96","97","98","99","100"],"import React, { useRef, useState, useEffect } from \"react\";\r\nimport Task from \"../../components/Task\";\r\nimport { ITask, TodoI } from \"../../type\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { request } from \"../../Utils\";\r\n\r\nexport default function Share(props: any) {\r\n  const _id = props.match.params.id;\r\n  const title = props.match.params.title;\r\n\r\n  const [todo, setTodo] = useState<TodoI>();\r\n\r\n  console.log(_id);\r\n  console.log(title);\r\n\r\n  const onShare = () => {\r\n    var personShare = prompt(\"Insert email to friend:\", \" \");\r\n    //nella riga 22 ho creato nel back-end il path '/share' ma non mi sono riuscito nella query\r\n    request(\"post\", \"/todo/share/\", todo)\r\n      .then((data) => {})\r\n      .catch((err) => {});\r\n  };\r\n  return (\r\n    <>\r\n      {!todo && <p>Loading...</p>}\r\n      {todo && (\r\n        <>\r\n          <form>\r\n            Task: <input type=\"text\" value={todo.title} readOnly></input>\r\n            <button onClick={onShare}>Condividi</button>\r\n          </form>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","F:\\ProgettiLearn\\Typescript\\tareas\\src\\components\\modale\\index.tsx",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":16,"column":8,"nodeType":"107","messageId":"108","endLine":16,"endColumn":13},{"ruleId":"109","severity":1,"message":"110","line":34,"column":6,"nodeType":"111","endLine":34,"endColumn":8,"suggestions":"112"},{"ruleId":"105","severity":1,"message":"113","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"114","line":1,"column":27,"nodeType":"107","messageId":"108","endLine":1,"endColumn":36},{"ruleId":"105","severity":1,"message":"115","line":18,"column":5,"nodeType":"107","messageId":"108","endLine":18,"endColumn":10},{"ruleId":"105","severity":1,"message":"116","line":19,"column":5,"nodeType":"107","messageId":"108","endLine":19,"endColumn":9},{"ruleId":"105","severity":1,"message":"117","line":20,"column":5,"nodeType":"107","messageId":"108","endLine":20,"endColumn":12},{"ruleId":"105","severity":1,"message":"118","line":21,"column":5,"nodeType":"107","messageId":"108","endLine":21,"endColumn":7},{"ruleId":"105","severity":1,"message":"119","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":12},{"ruleId":"105","severity":1,"message":"120","line":3,"column":10,"nodeType":"107","messageId":"108","endLine":3,"endColumn":15},{"ruleId":"105","severity":1,"message":"106","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":13},{"ruleId":"105","severity":1,"message":"113","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":25},{"ruleId":"105","severity":1,"message":"114","line":1,"column":27,"nodeType":"107","messageId":"108","endLine":1,"endColumn":36},{"ruleId":"105","severity":1,"message":"121","line":1,"column":38,"nodeType":"107","messageId":"108","endLine":1,"endColumn":48},{"ruleId":"105","severity":1,"message":"106","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":13},{"ruleId":"105","severity":1,"message":"122","line":2,"column":28,"nodeType":"107","messageId":"108","endLine":2,"endColumn":34},{"ruleId":"105","severity":1,"message":"106","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":13},{"ruleId":"105","severity":1,"message":"114","line":2,"column":27,"nodeType":"107","messageId":"108","endLine":2,"endColumn":36},{"ruleId":"105","severity":1,"message":"106","line":1,"column":8,"nodeType":"107","messageId":"108","endLine":1,"endColumn":13},{"ruleId":"105","severity":1,"message":"114","line":2,"column":17,"nodeType":"107","messageId":"108","endLine":2,"endColumn":26},{"ruleId":"105","severity":1,"message":"122","line":2,"column":28,"nodeType":"107","messageId":"108","endLine":2,"endColumn":34},{"ruleId":"105","severity":1,"message":"122","line":1,"column":17,"nodeType":"107","messageId":"108","endLine":1,"endColumn":23},{"ruleId":"105","severity":1,"message":"114","line":1,"column":35,"nodeType":"107","messageId":"108","endLine":1,"endColumn":44},{"ruleId":"105","severity":1,"message":"119","line":2,"column":8,"nodeType":"107","messageId":"108","endLine":2,"endColumn":12},{"ruleId":"105","severity":1,"message":"120","line":3,"column":10,"nodeType":"107","messageId":"108","endLine":3,"endColumn":15},{"ruleId":"105","severity":1,"message":"106","line":4,"column":8,"nodeType":"107","messageId":"108","endLine":4,"endColumn":13},{"ruleId":"105","severity":1,"message":"123","line":5,"column":10,"nodeType":"107","messageId":"108","endLine":5,"endColumn":14},{"ruleId":"105","severity":1,"message":"124","line":12,"column":16,"nodeType":"107","messageId":"108","endLine":12,"endColumn":23},{"ruleId":"105","severity":1,"message":"125","line":18,"column":9,"nodeType":"107","messageId":"108","endLine":18,"endColumn":20},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"@typescript-eslint/no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateGlobalContext'. Either include it or remove the dependency array.","ArrayExpression",["128"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'email' is assigned a value but never used.","'name' is assigned a value but never used.","'surname' is assigned a value but never used.","'id' is assigned a value but never used.","'Task' is defined but never used.","'ITask' is defined but never used.","'useContext' is defined but never used.","'useRef' is defined but never used.","'Link' is defined but never used.","'setTodo' is assigned a value but never used.","'personShare' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},"Update the dependencies array to be: [updateGlobalContext]",{"range":"131","text":"132"},[1137,1139],"[updateGlobalContext]"]